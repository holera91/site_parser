import logging
import os
import gspread
from google.oauth2.service_account import Credentials
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
import requests
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

_client = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ credentials.json
if not os.path.exists("credentials.json"):
    logging.error("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!")
    exit(1)

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Sheets
def authenticate_google_sheets():
    global _client
    if _client is not None:
        return _client

    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    try:
        creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
        _client = gspread.authorize(creds)
        logging.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets.")
        return _client
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChromeDriver –¥–ª—è Selenium
def init_driver():
    options = Options()
    options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    return driver

# –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
def parse_job_pages():
    client = authenticate_google_sheets()
    sheet = client.open("Parser").sheet1  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    business_websites = sheet.col_values(1)  # –ß–∏—Ç–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Å–∞–π—Ç–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–π

    for row_index, urls in enumerate(business_websites, start=1):
        try:
            if not urls:
                continue
            links = [link.strip() for link in urls.split(",")]  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ –∑–∞–ø—è—Ç–æ–π
            job_urls = []

            for url in links:
                driver = init_driver()
                driver.get(url)
                time.sleep(3)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏

                soup = BeautifulSoup(driver.page_source, "html.parser")
                job_links = find_job_links(soup, url)
                job_urls.extend(job_links)
                driver.quit()

            if job_urls:
                job_urls_str = ", ".join(job_urls)
                sheet.update_cell(row_index, 2, job_urls_str)  # –ó–∞–ø–∏—Å—å –≤ –∫–æ–ª–æ–Ω–∫—É "Job URL"
                logging.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω—ã —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É {row_index}: {job_urls_str}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {urls}: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
def find_job_links(soup, url):
    job_keywords = ["job", "career", "careers", "jobs", "hiring", "employment", "join us", "work with us", "vacancies", "job opening"]
    job_links = []
    
    for link in soup.find_all("a", href=True):
        href = link["href"]
        text = link.text.strip().lower()

        if any(keyword in text for keyword in job_keywords) or any(keyword in href for keyword in job_keywords):
            full_link = href if href.startswith("http") else url + href
            job_links.append(full_link)

    return job_links

# –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
def parse_vacancies():
    client = authenticate_google_sheets()
    sheet = client.open("Parser").sheet1
    job_urls_list = sheet.col_values(2)  # –ß–∏—Ç–∞–µ–º –∫–æ–ª–æ–Ω–∫—É "Job URL"

    job_titles = ["Software Developer", "Data Engineer", "Software Architect", "Designer", "Data Scientist", 
                  "IT Manager", "DevOps", "Tester", "Back End", "Backend", "Back-End", "Front End", "Frontend", 
                  "Front-End", "Data", "iOS", "Android", "Developer", "Project", "Product", "IT"]  # –î–æ–±–∞–≤–∏–ª "IT"

    for row_index, job_urls in enumerate(job_urls_list, start=1):
        try:
            if not job_urls:
                continue
            links = [link.strip() for link in job_urls.split(",")]  # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫–∏

            found_vacancies = []
            for job_url in links:
                response = requests.get(job_url, timeout=10)
                soup = BeautifulSoup(response.text, "html.parser")

                vacancies = find_vacancy_titles(soup, job_titles)
                if vacancies:
                    found_vacancies.extend(vacancies)

            if found_vacancies:
                vacancies_str = ", ".join(found_vacancies)
                sheet.update_cell(row_index, 3, vacancies_str)  # –ó–∞–ø–∏—Å—å –≤ –∫–æ–ª–æ–Ω–∫—É "Job Openings"
                logging.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å—Ç—Ä–æ–∫—É {row_index}: {vacancies_str}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {job_urls}: {e}")

# –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
def find_vacancy_titles(soup, job_titles):
    found_vacancies = []
    for element in soup.find_all(text=True):
        text = element.strip()
        for title in job_titles:
            if title.lower() in text.lower():
                found_vacancies.append(text)
    return found_vacancies

if __name__ == "__main__":
    try:
        parse_job_pages()  # –≠—Ç–∞–ø 1: –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
        parse_vacancies()  # –≠—Ç–∞–ø 2: –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —ç—Ç–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
    except Exception as e:
        logging.error(f"üö® –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
